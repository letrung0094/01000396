// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 14.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGuiTest
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// Messed up while recording
        /// </summary>
        public void FirstTest()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICell_Contents_textEdit = this.UIForm1Window.UICell_Contents_textWindow.UICell_Contents_textEdit;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(45, 43));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(28, 8));

            // Type '10' in 'Cell_Contents_text' text box
            uICell_Contents_textEdit.Text = this.FirstTestParams.UICell_Contents_textEditText;

            // Type '{Enter}' in 'Cell_Contents_text' text box
            Keyboard.SendKeys(uICell_Contents_textEdit, this.FirstTestParams.UICell_Contents_textEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(129, 34));

            // Type '=B1*2' in 'Cell_Contents_text' text box
            uICell_Contents_textEdit.Text = this.FirstTestParams.UICell_Contents_textEditText1;

            // Type '{Enter}' in 'Cell_Contents_text' text box
            Keyboard.SendKeys(uICell_Contents_textEdit, this.FirstTestParams.UICell_Contents_textEditSendKeys1, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(66, 13));

            // Type '=a1*2' in 'Cell_Contents_text' text box
            uICell_Contents_textEdit.Text = this.FirstTestParams.UICell_Contents_textEditText2;

            // Type '{Enter}' in 'Cell_Contents_text' text box
            Keyboard.SendKeys(uICell_Contents_textEdit, this.FirstTestParams.UICell_Contents_textEditSendKeys2, ModifierKeys.None);

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(32, 13));
        }
        
        /// <summary>
        /// Adding formulas to cells to check dependencies
        /// </summary>
        public void Test1()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICell_Contents_textEdit = this.UIForm1Window.UICell_Contents_textWindow.UICell_Contents_textEdit;
            WinClient uISpreadsheetPanel1Client = this.UIForm1Window.UIItemWindow.UISpreadsheetPanel1Client;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(31, 37));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(9, 4));

            // Type '10' in 'Cell_Contents_text' text box
            uICell_Contents_textEdit.Text = this.Test1Params.UICell_Contents_textEditText;

            // Type '{Enter}' in 'Cell_Contents_text' text box
            Keyboard.SendKeys(uICell_Contents_textEdit, this.Test1Params.UICell_Contents_textEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(133, 41));

            // Type '=A1*2' in 'Cell_Contents_text' text box
            uICell_Contents_textEdit.Text = this.Test1Params.UICell_Contents_textEditText1;

            // Type '{Enter}' in 'Cell_Contents_text' text box
            Keyboard.SendKeys(uICell_Contents_textEdit, this.Test1Params.UICell_Contents_textEditSendKeys1, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(230, 37));

            // Type '=B1*2' in 'Cell_Contents_text' text box
            uICell_Contents_textEdit.Text = this.Test1Params.UICell_Contents_textEditText2;

            // Type '{Enter}' in 'Cell_Contents_text' text box
            Keyboard.SendKeys(uICell_Contents_textEdit, this.Test1Params.UICell_Contents_textEditSendKeys2, ModifierKeys.None);

            // Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, new Point(317, 38));

            // Type '=A1+B1+C1' in 'Cell_Contents_text' text box
            uICell_Contents_textEdit.Text = this.Test1Params.UICell_Contents_textEditText3;

            // Type '{Enter}' in 'Cell_Contents_text' text box
            Keyboard.SendKeys(uICell_Contents_textEdit, this.Test1Params.UICell_Contents_textEditSendKeys3, ModifierKeys.None);
        }
        
        /// <summary>
        /// Checks to see if the value in D1 is correct
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinEdit uICell_Value_textEdit = this.UIForm1Window.UICell_Value_textWindow.UICell_Value_textEdit;
            #endregion

            // Verify that the 'Text' property of 'Cell_Value_text' text box equals '70'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UICell_Value_textEditText, uICell_Value_textEdit.Text);
        }
        
        /// <summary>
        /// Set A1 to 10
        /// </summary>
        public void SetCellTest1()
        {
            #region Variable Declarations
            WinListItem uISpreadsheetGUIShortcListItem = this.UIProgramManagerWindow.UIDesktopList.UISpreadsheetGUIShortcListItem;
            WinButton uIOpenButton = this.UIOpenFileSecurityWarnWindow.UIOpenWindow.UIOpenButton;
            WinEdit uICell_Contents_textEdit = this.UIForm1Window.UICell_Contents_textWindow.UICell_Contents_textEdit;
            #endregion

            // Double-Click 'SpreadsheetGUI - Shortcut' list item
            Mouse.DoubleClick(uISpreadsheetGUIShortcListItem, new Point(42, 24));

            // Click '&Open' button
            Mouse.Click(uIOpenButton, new Point(56, 11));

            // Type '10' in 'Cell_Contents_text' text box
            uICell_Contents_textEdit.Text = this.SetCellTest1Params.UICell_Contents_textEditText;

            // Type '{Enter}' in 'Cell_Contents_text' text box
            Keyboard.SendKeys(uICell_Contents_textEdit, this.SetCellTest1Params.UICell_Contents_textEditSendKeys, ModifierKeys.None);
        }
        
        /// <summary>
        /// Checks to see if 10 is in A1
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinEdit uICell_Value_textEdit = this.UIForm1Window.UICell_Value_textWindow.UICell_Value_textEdit;
            #endregion

            // Verify that the 'Text' property of 'Cell_Value_text' text box equals '10'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UICell_Value_textEditText, uICell_Value_textEdit.Text);
        }
        
        #region Properties
        public virtual FirstTestParams FirstTestParams
        {
            get
            {
                if ((this.mFirstTestParams == null))
                {
                    this.mFirstTestParams = new FirstTestParams();
                }
                return this.mFirstTestParams;
            }
        }
        
        public virtual Test1Params Test1Params
        {
            get
            {
                if ((this.mTest1Params == null))
                {
                    this.mTest1Params = new Test1Params();
                }
                return this.mTest1Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual SetCellTest1Params SetCellTest1Params
        {
            get
            {
                if ((this.mSetCellTest1Params == null))
                {
                    this.mSetCellTest1Params = new SetCellTest1Params();
                }
                return this.mSetCellTest1Params;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIOpenFileSecurityWarnWindow UIOpenFileSecurityWarnWindow
        {
            get
            {
                if ((this.mUIOpenFileSecurityWarnWindow == null))
                {
                    this.mUIOpenFileSecurityWarnWindow = new UIOpenFileSecurityWarnWindow();
                }
                return this.mUIOpenFileSecurityWarnWindow;
            }
        }
        
        public UIForm1Window UIForm1Window
        {
            get
            {
                if ((this.mUIForm1Window == null))
                {
                    this.mUIForm1Window = new UIForm1Window();
                }
                return this.mUIForm1Window;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private FirstTestParams mFirstTestParams;
        
        private Test1Params mTest1Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private SetCellTest1Params mSetCellTest1Params;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIOpenFileSecurityWarnWindow mUIOpenFileSecurityWarnWindow;
        
        private UIForm1Window mUIForm1Window;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'FirstTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class FirstTestParams
    {
        
        #region Fields
        /// <summary>
        /// Type '10' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditText = "10";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=B1*2' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditText1 = "=B1*2";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=a1*2' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditText2 = "=a1*2";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditSendKeys2 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'Test1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class Test1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '10' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditText = "10";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditSendKeys = "{Enter}";
        
        /// <summary>
        /// Type '=A1*2' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditText1 = "=A1*2";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditSendKeys1 = "{Enter}";
        
        /// <summary>
        /// Type '=B1*2' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditText2 = "=B1*2";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditSendKeys2 = "{Enter}";
        
        /// <summary>
        /// Type '=A1+B1+C1' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditText3 = "=A1+B1+C1";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditSendKeys3 = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Value_text' text box equals '70'
        /// </summary>
        public string UICell_Value_textEditText = "70";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SetCellTest1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class SetCellTest1Params
    {
        
        #region Fields
        /// <summary>
        /// Type '10' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditText = "10";
        
        /// <summary>
        /// Type '{Enter}' in 'Cell_Contents_text' text box
        /// </summary>
        public string UICell_Contents_textEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'Cell_Value_text' text box equals '10'
        /// </summary>
        public string UICell_Value_textEditText = "10";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UISpreadsheetGUIShortcListItem
        {
            get
            {
                if ((this.mUISpreadsheetGUIShortcListItem == null))
                {
                    this.mUISpreadsheetGUIShortcListItem = new WinListItem(this);
                    #region Search Criteria
                    this.mUISpreadsheetGUIShortcListItem.SearchProperties[WinListItem.PropertyNames.Name] = "SpreadsheetGUI - Shortcut";
                    this.mUISpreadsheetGUIShortcListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUISpreadsheetGUIShortcListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUISpreadsheetGUIShortcListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenFileSecurityWarnWindow : WinWindow
    {
        
        public UIOpenFileSecurityWarnWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Open File - Security Warning";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public UIOpenWindow UIOpenWindow
        {
            get
            {
                if ((this.mUIOpenWindow == null))
                {
                    this.mUIOpenWindow = new UIOpenWindow(this);
                }
                return this.mUIOpenWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIOpenWindow mUIOpenWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOpenWindow : WinWindow
    {
        
        public UIOpenWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "4426";
            this.WindowTitles.Add("Open File - Security Warning");
            #endregion
        }
        
        #region Properties
        public WinButton UIOpenButton
        {
            get
            {
                if ((this.mUIOpenButton == null))
                {
                    this.mUIOpenButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOpenButton.SearchProperties[WinButton.PropertyNames.Name] = "Open";
                    this.mUIOpenButton.WindowTitles.Add("Open File - Security Warning");
                    #endregion
                }
                return this.mUIOpenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOpenButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIForm1Window : WinWindow
    {
        
        public UIForm1Window()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Form1";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public UICell_Contents_textWindow UICell_Contents_textWindow
        {
            get
            {
                if ((this.mUICell_Contents_textWindow == null))
                {
                    this.mUICell_Contents_textWindow = new UICell_Contents_textWindow(this);
                }
                return this.mUICell_Contents_textWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UICell_Value_textWindow UICell_Value_textWindow
        {
            get
            {
                if ((this.mUICell_Value_textWindow == null))
                {
                    this.mUICell_Value_textWindow = new UICell_Value_textWindow(this);
                }
                return this.mUICell_Value_textWindow;
            }
        }
        #endregion
        
        #region Fields
        private UICell_Contents_textWindow mUICell_Contents_textWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UICell_Value_textWindow mUICell_Value_textWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICell_Contents_textWindow : WinWindow
    {
        
        public UICell_Contents_textWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Cell_Contents_text";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICell_Contents_textEdit
        {
            get
            {
                if ((this.mUICell_Contents_textEdit == null))
                {
                    this.mUICell_Contents_textEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICell_Contents_textEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICell_Contents_textEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICell_Contents_textEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "2";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanel1Client
        {
            get
            {
                if ((this.mUISpreadsheetPanel1Client == null))
                {
                    this.mUISpreadsheetPanel1Client = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanel1Client.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUISpreadsheetPanel1Client;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanel1Client;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UICell_Value_textWindow : WinWindow
    {
        
        public UICell_Value_textWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "Cell_Value_text";
            this.WindowTitles.Add("Form1");
            #endregion
        }
        
        #region Properties
        public WinEdit UICell_Value_textEdit
        {
            get
            {
                if ((this.mUICell_Value_textEdit == null))
                {
                    this.mUICell_Value_textEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUICell_Value_textEdit.WindowTitles.Add("Form1");
                    #endregion
                }
                return this.mUICell_Value_textEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUICell_Value_textEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "14.0.23107.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
